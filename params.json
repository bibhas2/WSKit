{"name":"Wskit","tagline":"A HTTP client library that mimics the Play WS API","body":"# WSKit\r\nWSKit is a HTTP client library that attempts to reproduce the [Play WS API](https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.libs.ws.package) \r\nin Swift. It has two key features:\r\n\r\n- A promise based API for easier asynchrnous HTTP communication.\r\n- Provides a retry mechanism for GET requests in case of network communication errors. This is important for mobile applicatins where\r\nnetwork connection can be unreliable.\r\n\r\n### Example\r\nA simple GET request.\r\n\r\n```swift\r\nWS.url(\"https://example.com\").get()\r\n    .then { (res) -> Void in\r\n        print(res.body)\r\n    }.error {err in\r\n        print(err)\r\n    }\r\n```\r\n\r\nWhere ``res`` is a ``WSResponse`` object. And ``err`` is ``NSError``. An error occurs in case of a network problem or if the response \r\nstatus code is more than ``400``.\r\n\r\nA simple POST example:\r\n\r\n```swift\r\nWS.url(\"https://httpbin.org/post\")\r\n    .withHeaders([\"Content-Type\":\"application/json\"])\r\n    .post(\"{'hello':'mama'}\")\r\n    .then { (res) -> Void in\r\n        print(res.body)\r\n    }.error {err in\r\n        print(err)\r\n    }\r\n```\r\n\r\n## API Documentation\r\nView full [API documentation](docs/index.html) online.\r\n\r\n## Installation\r\nYou can add WSKit to your project using Cocoapod.\r\n\r\n```\r\ntarget 'WSKitExample' do\r\n    pod 'WSKit', :git => \"https://github.com/bibhas2/WSKit.git\", :tag => \"1.0.3\"\r\nend\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}